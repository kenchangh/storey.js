{"name":"storey.js","tagline":"Asynchronous, minimalistic wrapper for Web Storage API","body":"storey.js\r\n=========\r\n\r\n**This project is still under development. storey.js is developed to be used in [cargo.js](https://github.com/mavenave/cargo.js).**\r\n\r\nstorey.js is a bunch of wrapper functions that make DOM / Web Storage **safer** and **better** to use.\r\n\r\nSome of the key features of storey.js:\r\n - Asynchronous wrappers over Storage transactions\r\n - Serializes / deserializes to string (less shit work for you)\r\n - Minimal, no dependencies and fallbacks (most browsers support Web Storage already)\r\n\r\nAPI Reference\r\n-------------\r\n\r\n**storey.set(key, value, [callback])**\r\n\r\nAsynchronously sets a `key` to `value` in storage. `key` must be a string. The `callback` is optional, without parameters.\r\n\r\n**storey.setSync(key, value)**\r\n\r\nSynchronously sets a `value` with `key` in storage.\r\n\r\n**storey.setMulti(keyValue, [callback])**\r\n\r\nAsynchronously sets an Object `keyValue`. `keyValue` is defined below in the example. `callback` is optional, without parameters.\r\n\r\n```javascript\r\nvar keyValue = {\r\n  'hello': 'world',\r\n  'buh': 'bye'\r\n}\r\nstorage.setMulti(keyValue, function() {\r\n  // optional callback, do something here\r\n});\r\n```\r\n\r\n**storey.get(key, callback)**\r\n\r\nAsynchronously gets a `key`. `callback` is filled with `value` parameter.\r\n```javascript\r\nstorey.get('key', function(value) {\r\n  console.log(value); // do something with value\r\n});\r\n```\r\n\r\n**storey.getSync(key)**\r\n\r\nSynchronously gets the value of `key`.\r\n\r\n**storey.getMulti(keys, callback)**\r\n\r\nAsynchronously gets an Array of values by using a `keys` Array.\r\n`callback` has Array `values` as parameter.\r\n\r\n```javascript\r\nvar keys = ['hello', 'foo'];\r\nstorage.getMulti(keys, function(values) {\r\n  // do something with Array of values\r\n});\r\n```\r\n\r\n**storey.remove(key, [callback])**\r\n\r\nAsynchronously removes the `key` from storage. `callback` is optional.\r\n\r\n**storey.removeSync(key)**\r\n\r\nSynchronously removes the `key` from storage.\r\n\r\n**storey.removeMulti(keys, [callback])**\r\n\r\nAsynchronously removes an Array of `keys` from storage. `callback` is optional.\r\n\r\n**storey.clear()**\r\n\r\nCaution! Approaching danger! Asynchronously clears up Web Storage.\r\n\r\n**storey.has(key, callback)**\r\n\r\nPurely a syntactic sugar for checking presence of `key`. Equivalent to `storey.get`.\r\n\r\n**storey.has()**\r\n\r\nChecks how much space is used by keys and values in storage.\r\n\r\n**storey.left()**\r\n\r\nChecks how much space is left in storage. 500 MB - `storey.has()`.\r\n\r\nLicense\r\n-------\r\nThe MIT License. Look [here](https://github.com/mavenave/storey.js/blob/master/README.md) for it.\r\n\r\nContact\r\n-------\r\nLike what you see here? I'm more than willing to receive Pull Requests. :smile: I'm reachable at [@mavenave](https://twitter.com/mavenave) and guanhao3797@gmail.com.\r\n","google":"UA-53448691-2","note":"Don't delete this file! It's used internally to help with page regeneration."}